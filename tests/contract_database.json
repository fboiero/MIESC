{
  "version": "3.0.0",
  "last_updated": "2025-10-13",
  "total_contracts": 13,
  "contracts": [
    {
      "id": 1,
      "name": "reentrancy_simple",
      "filename": "reentrancy_simple.sol",
      "path": "examples/reentrancy_simple.sol",
      "description": "Classic reentrancy vulnerability with attacker contract PoC",
      "vulnerabilities": [
        {
          "type": "reentrancy",
          "swc_id": "SWC-107",
          "owasp_category": "SC-01",
          "cwe_id": "CWE-841",
          "severity": "CRITICAL",
          "location": "withdraw() function",
          "description": "External call before state update allows reentrancy"
        }
      ],
      "solidity_version": "^0.8.0",
      "lines_of_code": 56,
      "complexity": "simple",
      "has_poc": true,
      "testing_priority": "HIGH",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "reentrancy-eth",
          "confidence": "high"
        },
        "mythril": {
          "should_detect": true,
          "detector": "Reentrancy",
          "confidence": "high"
        },
        "manticore": {
          "should_detect": true,
          "detector": "Reentrancy pattern",
          "confidence": "medium"
        },
        "aderyn": {
          "should_detect": false,
          "reason": "Limited reentrancy detection"
        },
        "echidna": {
          "should_detect": true,
          "method": "property_violation",
          "confidence": "high"
        }
      }
    },
    {
      "id": 2,
      "name": "vulnerable_bank",
      "filename": "vulnerable_bank.sol",
      "path": "examples/vulnerable_bank.sol",
      "description": "Bank contract with reentrancy and missing access control",
      "vulnerabilities": [
        {
          "type": "reentrancy",
          "swc_id": "SWC-107",
          "owasp_category": "SC-01",
          "cwe_id": "CWE-841",
          "severity": "CRITICAL",
          "location": "withdraw() function",
          "description": "External call before balance update"
        },
        {
          "type": "missing_access_control",
          "swc_id": "SWC-105",
          "owasp_category": "SC-02",
          "cwe_id": "CWE-284",
          "severity": "CRITICAL",
          "location": "emergencyWithdraw() function",
          "description": "No access control allows anyone to drain funds"
        }
      ],
      "solidity_version": "^0.8.0",
      "lines_of_code": 100,
      "complexity": "medium",
      "has_poc": true,
      "testing_priority": "HIGH",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detectors": ["reentrancy-eth", "missing-zero-check"],
          "confidence": "high"
        },
        "mythril": {
          "should_detect": true,
          "detector": "Reentrancy",
          "confidence": "high"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "missing-access-control",
          "confidence": "medium"
        },
        "wake": {
          "should_detect": true,
          "detector": "access-control-patterns",
          "confidence": "medium"
        }
      }
    },
    {
      "id": 3,
      "name": "integer_overflow",
      "filename": "integer_overflow.sol",
      "path": "examples/integer_overflow.sol",
      "description": "Integer overflow vulnerabilities in Solidity 0.7.0 (pre-0.8.0)",
      "vulnerabilities": [
        {
          "type": "integer_overflow",
          "swc_id": "SWC-101",
          "owasp_category": "SC-03",
          "cwe_id": "CWE-190",
          "severity": "HIGH",
          "location": "transfer(), batchTransfer(), addBalance()",
          "description": "Arithmetic operations without SafeMath"
        }
      ],
      "solidity_version": "^0.7.0",
      "lines_of_code": 58,
      "complexity": "medium",
      "has_poc": false,
      "testing_priority": "MEDIUM",
      "notes": "Version-specific: Only vulnerable in Solidity < 0.8.0",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "integer-overflow",
          "confidence": "medium"
        },
        "mythril": {
          "should_detect": true,
          "detector": "Integer Overflow",
          "confidence": "high"
        },
        "smtchecker": {
          "should_detect": true,
          "detector": "overflow-check",
          "confidence": "high"
        }
      }
    },
    {
      "id": 4,
      "name": "tx_origin",
      "filename": "tx_origin.sol",
      "path": "examples/tx_origin.sol",
      "description": "tx.origin authentication bypass via phishing attack",
      "vulnerabilities": [
        {
          "type": "tx_origin_auth",
          "swc_id": "SWC-115",
          "owasp_category": "SC-06",
          "cwe_id": "CWE-477",
          "severity": "MEDIUM",
          "location": "transferOwnership(), withdraw(), executeCall()",
          "description": "Uses tx.origin for authentication instead of msg.sender"
        }
      ],
      "solidity_version": "^0.8.0",
      "lines_of_code": 81,
      "complexity": "medium",
      "has_poc": true,
      "testing_priority": "MEDIUM",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "tx-origin",
          "confidence": "medium"
        },
        "solhint": {
          "should_detect": true,
          "rule": "avoid-tx-origin",
          "confidence": "high"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "tx-origin-usage",
          "confidence": "high"
        }
      }
    },
    {
      "id": 5,
      "name": "unchecked_send",
      "filename": "unchecked_send.sol",
      "path": "examples/unchecked_send.sol",
      "description": "Multiple patterns of unchecked external calls",
      "vulnerabilities": [
        {
          "type": "unchecked_external_call",
          "swc_id": "SWC-104",
          "owasp_category": "SC-04",
          "cwe_id": "CWE-252",
          "severity": "HIGH",
          "location": "withdrawWithSend(), withdrawWithCall(), batchPayout(), emergencyWithdraw()",
          "description": "Return values of send(), call(), and delegatecall() not checked"
        }
      ],
      "solidity_version": "^0.8.0",
      "lines_of_code": 75,
      "complexity": "medium",
      "has_poc": false,
      "testing_priority": "HIGH",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "unchecked-send",
          "confidence": "medium"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "unchecked-return",
          "confidence": "high"
        },
        "wake": {
          "should_detect": true,
          "detector": "return-value-check",
          "confidence": "medium"
        }
      }
    },
    {
      "id": 6,
      "name": "delegatecall_injection",
      "filename": "delegatecall_injection.sol",
      "path": "examples/delegatecall_injection.sol",
      "description": "Delegatecall to user-controlled address with storage collision",
      "vulnerabilities": [
        {
          "type": "controlled_delegatecall",
          "swc_id": "SWC-112",
          "owasp_category": "SC-05",
          "cwe_id": "CWE-829",
          "severity": "CRITICAL",
          "location": "execute() function",
          "description": "Delegatecall to user-controlled target can overwrite storage"
        },
        {
          "type": "storage_collision",
          "swc_id": "SWC-112",
          "owasp_category": "SC-05",
          "cwe_id": "CWE-691",
          "severity": "HIGH",
          "location": "updateValue() function",
          "description": "Storage layout mismatch in delegatecall context"
        }
      ],
      "solidity_version": "^0.8.0",
      "lines_of_code": 84,
      "complexity": "complex",
      "has_poc": true,
      "testing_priority": "HIGH",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "controlled-delegatecall",
          "confidence": "high"
        },
        "mythril": {
          "should_detect": true,
          "detector": "Delegatecall to user-supplied address",
          "confidence": "high"
        },
        "manticore": {
          "should_detect": true,
          "method": "symbolic_execution",
          "confidence": "medium"
        }
      }
    },
    {
      "id": 7,
      "name": "voting",
      "filename": "voting.sol",
      "path": "examples/voting.sol",
      "description": "Ballot contract with vote delegation and DoS vulnerability",
      "vulnerabilities": [
        {
          "type": "dos_unbounded_loop",
          "swc_id": "SWC-128",
          "owasp_category": "SC-07",
          "cwe_id": "CWE-400",
          "severity": "MEDIUM",
          "location": "delegate() function (lines 100-105)",
          "description": "While loop for delegation chain can exceed gas limit causing DoS"
        },
        {
          "type": "missing_access_control",
          "swc_id": "SWC-105",
          "owasp_category": "SC-02",
          "cwe_id": "CWE-284",
          "severity": "LOW",
          "location": "giveRightToVote() function",
          "description": "Only chairperson check without modifier pattern, less secure"
        }
      ],
      "solidity_version": ">=0.7.0 <0.9.0",
      "lines_of_code": 167,
      "complexity": "medium",
      "has_poc": false,
      "testing_priority": "MEDIUM",
      "notes": "Classic Solidity voting example with potential delegation chain DoS. Comments acknowledge the loop vulnerability.",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "reentrancy-benign",
          "confidence": "medium"
        },
        "mythril": {
          "should_detect": false,
          "reason": "DoS via unbounded loop typically not detected by symbolic execution"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "state-change-in-loop",
          "confidence": "low"
        },
        "semgrep": {
          "should_detect": true,
          "rule": "unbounded-loop-pattern",
          "confidence": "medium"
        }
      }
    },
    {
      "id": 8,
      "name": "secure_bank",
      "filename": "secure_bank.sol",
      "path": "examples/secure_bank.sol",
      "description": "Secure baseline bank implementation following all best practices",
      "vulnerabilities": [],
      "solidity_version": "^0.8.0",
      "lines_of_code": 195,
      "complexity": "medium",
      "has_poc": false,
      "testing_priority": "LOW",
      "notes": "Negative test case demonstrating proper security patterns: reentrancy guard, CEI pattern, access control, checked external calls, input validation",
      "security_features": [
        "Reentrancy protection with nonReentrant modifier",
        "Checks-Effects-Interactions pattern",
        "Access control with onlyOwner modifier",
        "Checked return values on external calls",
        "Custom errors for gas efficiency",
        "Input validation on all functions",
        "Event emission for transparency"
      ],
      "expected_tool_detections": {
        "slither": {
          "should_detect": false,
          "expected_findings": "minimal or informational only"
        },
        "mythril": {
          "should_detect": false,
          "expected_findings": "no vulnerabilities"
        },
        "aderyn": {
          "should_detect": false,
          "expected_findings": "clean report"
        },
        "manticore": {
          "should_detect": false,
          "expected_findings": "no exploitable paths"
        }
      }
    },
    {
      "id": 9,
      "name": "ManualOracle",
      "filename": "ManualOracle.sol",
      "path": "examples/ManualOracle.sol",
      "description": "Manual oracle with centralization risks for Xscrow contract",
      "vulnerabilities": [
        {
          "type": "centralization_risk",
          "swc_id": "SWC-105",
          "owasp_category": "SC-02",
          "cwe_id": "CWE-276",
          "severity": "MEDIUM",
          "location": "fulfillWithdraw(), fulfillPartialWithdraw(), fulfillExecution()",
          "description": "Owner has complete control over withdrawal and execution approvals - single point of failure"
        },
        {
          "type": "oracle_manipulation",
          "swc_id": "SWC-136",
          "owasp_category": "SC-09",
          "cwe_id": "CWE-345",
          "severity": "MEDIUM",
          "location": "all fulfill functions",
          "description": "Manual oracle allows owner to arbitrarily approve/deny requests without external validation"
        }
      ],
      "solidity_version": "^0.8.9",
      "lines_of_code": 141,
      "complexity": "medium",
      "has_poc": false,
      "testing_priority": "MEDIUM",
      "notes": "Uses OpenZeppelin Ownable, modular design with custom modifiers. Trust assumption on owner role.",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detector": "centralization-risk",
          "confidence": "medium"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "centralization-pattern",
          "confidence": "low"
        },
        "mythril": {
          "should_detect": false,
          "reason": "Centralization is a design pattern, not a technical vulnerability"
        }
      }
    },
    {
      "id": 10,
      "name": "Whitelist",
      "filename": "Whitelist.sol",
      "path": "examples/Whitelist.sol",
      "description": "Whitelist management contract with meta-transaction support",
      "vulnerabilities": [],
      "solidity_version": "^0.8.20",
      "lines_of_code": 49,
      "complexity": "simple",
      "has_poc": false,
      "testing_priority": "LOW",
      "notes": "Well-implemented whitelist with OpenZeppelin patterns, trusted forwarder for gasless transactions, proper access control",
      "security_features": [
        "OpenZeppelin Ownable for access control",
        "BaseRelayRecipient for meta-transactions",
        "Custom error for gas efficiency",
        "Zero address validation",
        "Proper _msgSender() override for meta-tx support"
      ],
      "expected_tool_detections": {
        "slither": {
          "should_detect": false,
          "expected_findings": "informational only"
        },
        "mythril": {
          "should_detect": false,
          "expected_findings": "no vulnerabilities"
        },
        "aderyn": {
          "should_detect": false,
          "expected_findings": "clean report"
        }
      }
    },
    {
      "id": 11,
      "name": "Xscrow",
      "filename": "Xscrow.sol",
      "path": "examples/Xscrow.sol",
      "description": "Upgradeable escrow contract v1 with oracle integration",
      "vulnerabilities": [
        {
          "type": "unbounded_iteration",
          "swc_id": "SWC-128",
          "owasp_category": "SC-07",
          "cwe_id": "CWE-834",
          "severity": "HIGH",
          "location": "migrateAll() function (lines 337-342)",
          "description": "Loop over unbounded _warranties mapping can exceed gas limit, causing migration to fail"
        },
        {
          "type": "centralization_risk",
          "swc_id": "SWC-105",
          "owasp_category": "SC-02",
          "cwe_id": "CWE-269",
          "severity": "MEDIUM",
          "location": "Oracle dependency, onlyOwner functions",
          "description": "Heavy reliance on oracle and owner roles creates centralization vectors"
        }
      ],
      "solidity_version": "^0.8.9",
      "lines_of_code": 358,
      "complexity": "complex",
      "has_poc": false,
      "testing_priority": "HIGH",
      "notes": "UUPS upgradeable pattern, uses OpenZeppelin libraries, SafeERC20, Pausable. Migration function has DoS risk with large user base.",
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detectors": ["costly-loop", "centralization-risk"],
          "confidence": "medium"
        },
        "mythril": {
          "should_detect": false,
          "reason": "Unbounded loop DoS typically not detected"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "loop-over-dynamic-structure",
          "confidence": "medium"
        },
        "manticore": {
          "should_detect": false,
          "reason": "Too complex for symbolic execution"
        }
      }
    },
    {
      "id": 12,
      "name": "Xscrow_v2",
      "filename": "Xscrow_v2.sol",
      "path": "examples/Xscrow_v2.sol",
      "description": "Escrow contract v2 with improved error handling and permit support",
      "vulnerabilities": [
        {
          "type": "unbounded_iteration",
          "swc_id": "SWC-128",
          "owasp_category": "SC-07",
          "cwe_id": "CWE-834",
          "severity": "HIGH",
          "location": "migrateAll() function (lines 390-394)",
          "description": "Same unbounded loop issue as v1 - migration can fail with large user base"
        },
        {
          "type": "centralization_risk",
          "swc_id": "SWC-105",
          "owasp_category": "SC-02",
          "cwe_id": "CWE-269",
          "severity": "MEDIUM",
          "location": "Oracle dependency, onlyOwner functions, restore() function",
          "description": "Centralization risks remain, restore() adds dependency on oldXscrow address"
        }
      ],
      "solidity_version": "^0.8.9",
      "lines_of_code": 419,
      "complexity": "complex",
      "has_poc": false,
      "testing_priority": "HIGH",
      "notes": "Improved version with custom errors, EIP-2612 permit support, restore mechanism for migration. Still has same DoS risk in migrateAll().",
      "improvements_over_v1": [
        "Custom errors instead of require strings (gas optimization)",
        "EIP-2612 permit support for gasless approvals",
        "restore() function for backward migration compatibility",
        "oldXscrow tracking for migration chain",
        "Better fee handling in _transferFeeToVendor"
      ],
      "expected_tool_detections": {
        "slither": {
          "should_detect": true,
          "detectors": ["costly-loop", "centralization-risk"],
          "confidence": "medium"
        },
        "mythril": {
          "should_detect": false,
          "reason": "Complex contract with many dependencies"
        },
        "aderyn": {
          "should_detect": true,
          "detector": "loop-over-dynamic-structure",
          "confidence": "medium"
        },
        "manticore": {
          "should_detect": false,
          "reason": "Too complex for symbolic execution"
        }
      }
    },
    {
      "id": 13,
      "name": "testXscrow_v2",
      "filename": "testXscrow_v2.sol",
      "path": "examples/testXscrow_v2.sol",
      "description": "Foundry test suite for Xscrow v2 contract",
      "vulnerabilities": [],
      "solidity_version": "^0.8.9",
      "lines_of_code": 594,
      "complexity": "complex",
      "has_poc": true,
      "testing_priority": "LOW",
      "notes": "Not a production contract - comprehensive test suite using Foundry framework. Tests all Xscrow v2 functions including edge cases, reverts, events, and permit functionality. Includes DummyWallet helper contract.",
      "test_coverage": [
        "Address zero validation tests",
        "Fee bounds validation",
        "Oracle access control tests",
        "Deposit and withdrawal flows",
        "Partial withdrawal logic",
        "Migration functionality",
        "Permit (EIP-2612) support",
        "Restore mechanism tests",
        "Event emission verification",
        "Revert condition testing"
      ],
      "expected_tool_detections": {
        "slither": {
          "should_detect": false,
          "expected_findings": "informational - test patterns",
          "notes": "Test contracts should be excluded from security analysis"
        },
        "mythril": {
          "should_detect": false,
          "expected_findings": "N/A - test file"
        },
        "aderyn": {
          "should_detect": false,
          "expected_findings": "N/A - test file"
        }
      }
    }
  ],
  "vulnerability_type_summary": {
    "reentrancy": 2,
    "access_control": 2,
    "integer_overflow": 1,
    "tx_origin_auth": 1,
    "unchecked_external_call": 1,
    "controlled_delegatecall": 1,
    "storage_collision": 1,
    "oracle_manipulation": 2,
    "dos_unbounded_loop": 1,
    "unbounded_iteration": 2,
    "centralization_risk": 3
  },
  "severity_distribution": {
    "CRITICAL": 4,
    "HIGH": 5,
    "MEDIUM": 7,
    "LOW": 1,
    "INFO": 0
  },
  "recommendations": {
    "add_contracts": [
      "front_running.sol",
      "timestamp_dependence.sol",
      "dos_block_limit.sol",
      "selfdestruct_unprotected.sol",
      "signature_replay.sol",
      "flash_loan_attack.sol",
      "price_oracle_manipulation.sol"
    ],
    "high_priority_testing": [
      "Xscrow.sol (migrateAll DoS)",
      "Xscrow_v2.sol (migrateAll DoS)",
      "voting.sol (delegation chain DoS)"
    ],
    "secure_reference_contracts": [
      "secure_bank.sol (reentrancy protection baseline)",
      "Whitelist.sol (access control patterns)"
    ]
  }
}
