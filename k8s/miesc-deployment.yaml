apiVersion: apps/v1
kind: Deployment
metadata:
  name: miesc-analyzer
  namespace: miesc
  labels:
    app: miesc
    component: analyzer
    version: v2.2.0
spec:
  replicas: 3

  # Rolling update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app: miesc
      component: analyzer

  template:
    metadata:
      labels:
        app: miesc
        component: analyzer
        version: v2.2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"

    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      # Init container to wait for Redis
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis 6379; do echo waiting for redis; sleep 2; done;']

      containers:
      - name: miesc
        image: miesc:2.2.0-optimized
        imagePullPolicy: IfNotPresent

        # Ports
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: miesc-config

        # Environment variables from Secrets
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: miesc-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: miesc-secrets
              key: anthropic-api-key
              optional: true
        - name: REDIS_URL
          value: "redis://redis:6379/0"

        # Resource limits
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

        # Health checks
        livenessProbe:
          exec:
            command:
            - python3
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          exec:
            command:
            - python3
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2

        # Volume mounts
        volumeMounts:
        - name: outputs
          mountPath: /app/outputs
        - name: cache
          mountPath: /app/cache
        - name: contracts
          mountPath: /app/contracts
          readOnly: true

      # Volumes
      volumes:
      - name: outputs
        persistentVolumeClaim:
          claimName: miesc-outputs-pvc
      - name: cache
        emptyDir: {}
      - name: contracts
        persistentVolumeClaim:
          claimName: miesc-contracts-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: miesc-service
  namespace: miesc
  labels:
    app: miesc
spec:
  type: LoadBalancer
  selector:
    app: miesc
    component: analyzer
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: 9090

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: miesc-outputs-pvc
  namespace: miesc
  labels:
    app: miesc
spec:
  accessModes:
  - ReadWriteMany  # Multiple pods need write access
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: miesc-contracts-pvc
  namespace: miesc
  labels:
    app: miesc
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 10Gi
