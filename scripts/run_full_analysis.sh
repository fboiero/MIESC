#!/bin/bash
# Xaudit - Full Analysis Pipeline
# Runs complete security audit workflow

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
CONTRACTS_DIR="src/contracts/vulnerable"
OUTPUT_DIR="analysis/results"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
REPORT_DIR="$OUTPUT_DIR/$TIMESTAMP"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}   Xaudit Full Analysis Pipeline${NC}"
echo -e "${BLUE}========================================${NC}\n"

# Create output directories
mkdir -p "$REPORT_DIR"/{slither,echidna,foundry,ai}

echo -e "${YELLOW}[1/6] Running Static Analysis (Slither)...${NC}"
for contract in $CONTRACTS_DIR/**/*.sol; do
    contract_name=$(basename "$contract" .sol)
    echo "  Analyzing: $contract_name"

    slither "$contract" \
        --json "$REPORT_DIR/slither/${contract_name}.json" \
        --checklist \
        > "$REPORT_DIR/slither/${contract_name}.txt" 2>&1 || true
done
echo -e "${GREEN}✓ Static analysis complete${NC}\n"

echo -e "${YELLOW}[2/6] Running Foundry Tests...${NC}"
if command -v forge &> /dev/null; then
    forge test --gas-report \
        > "$REPORT_DIR/foundry/test_results.txt" 2>&1 || true

    forge test --fuzz-runs 10000 \
        > "$REPORT_DIR/foundry/fuzz_results.txt" 2>&1 || true

    forge coverage --report lcov \
        > "$REPORT_DIR/foundry/coverage.txt" 2>&1 || true

    echo -e "${GREEN}✓ Foundry tests complete${NC}\n"
else
    echo -e "${RED}✗ Foundry not installed, skipping tests${NC}\n"
fi

echo -e "${YELLOW}[3/6] Running Echidna Fuzzing...${NC}"
if command -v echidna &> /dev/null; then
    for property_contract in src/contracts/properties/*.sol; do
        contract_name=$(basename "$property_contract" .sol)
        echo "  Fuzzing: $contract_name"

        timeout 300 echidna "$property_contract" \
            --config analysis/echidna/config.yaml \
            --format text \
            > "$REPORT_DIR/echidna/${contract_name}.txt" 2>&1 || true
    done
    echo -e "${GREEN}✓ Echidna fuzzing complete${NC}\n"
else
    echo -e "${RED}✗ Echidna not installed, skipping fuzzing${NC}\n"
fi

echo -e "${YELLOW}[4/6] Running AI Triage...${NC}"
if [ -f "$REPORT_DIR/slither/BasicReentrancy.json" ]; then
    python src/utils/ai_assistant.py \
        --findings "$REPORT_DIR/slither/BasicReentrancy.json" \
        --output "$REPORT_DIR/ai/triage_report.md" \
        2>&1 || true
    echo -e "${GREEN}✓ AI triage complete${NC}\n"
else
    echo -e "${YELLOW}⚠ No Slither results found, skipping AI triage${NC}\n"
fi

echo -e "${YELLOW}[5/6] Generating Consolidated Report...${NC}"
cat > "$REPORT_DIR/SUMMARY.md" <<EOF
# Xaudit Analysis Report
**Generated**: $(date)
**Run ID**: $TIMESTAMP

## Analysis Summary

### Tools Executed
- [x] Slither (Static Analysis)
- [x] Foundry (Testing & Fuzzing)
- [x] Echidna (Property-Based Fuzzing)
- [x] AI Assistant (Triage)

### Results Overview

#### Static Analysis (Slither)
$(find "$REPORT_DIR/slither" -name "*.json" | wc -l) contracts analyzed

#### Foundry Tests
\`\`\`
$(tail -20 "$REPORT_DIR/foundry/test_results.txt" 2>/dev/null || echo "No results")
\`\`\`

#### Echidna Fuzzing
$(find "$REPORT_DIR/echidna" -name "*.txt" | wc -l) property contracts tested

#### AI Triage
$([ -f "$REPORT_DIR/ai/triage_report.md" ] && echo "✓ Report generated" || echo "✗ Not available")

## Detailed Results

### High-Priority Findings
See individual tool reports in:
- \`$REPORT_DIR/slither/\`
- \`$REPORT_DIR/echidna/\`
- \`$REPORT_DIR/foundry/\`
- \`$REPORT_DIR/ai/\`

### Recommendations
1. Review all HIGH severity findings from Slither
2. Investigate property violations from Echidna
3. Check AI-triaged critical issues
4. Address test failures from Foundry

## Next Steps
- [ ] Manual code review of flagged functions
- [ ] Implement recommended mitigations
- [ ] Re-run analysis to verify fixes
- [ ] Consider formal verification (Certora) for critical contracts

---
*Generated by Xaudit - Hybrid Smart Contract Auditing Framework*
EOF

echo -e "${GREEN}✓ Report generated${NC}\n"

echo -e "${YELLOW}[6/6] Calculating Metrics...${NC}"
python - <<EOF
import json
import os
from pathlib import Path

report_dir = Path("$REPORT_DIR")
slither_dir = report_dir / "slither"

total_issues = 0
critical = high = medium = low = 0

for json_file in slither_dir.glob("*.json"):
    try:
        with open(json_file) as f:
            data = json.load(f)
            detectors = data.get('results', {}).get('detectors', [])
            total_issues += len(detectors)

            for d in detectors:
                impact = d.get('impact', '').lower()
                if impact == 'high':
                    critical += 1
                elif impact == 'medium':
                    high += 1
                elif impact == 'low':
                    medium += 1
                else:
                    low += 1
    except:
        pass

metrics = {
    'total_issues': total_issues,
    'critical': critical,
    'high': high,
    'medium': medium,
    'low': low
}

with open(report_dir / 'metrics.json', 'w') as f:
    json.dump(metrics, f, indent=2)

print(f"Total Issues: {total_issues}")
print(f"  Critical: {critical}")
print(f"  High: {high}")
print(f"  Medium: {medium}")
print(f"  Low: {low}")
EOF

echo -e "${GREEN}✓ Metrics calculated${NC}\n"

echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}Analysis Complete!${NC}"
echo -e "${BLUE}========================================${NC}\n"

echo -e "${YELLOW}Results saved to:${NC} $REPORT_DIR"
echo -e "${YELLOW}Summary:${NC} $REPORT_DIR/SUMMARY.md"
echo -e "${YELLOW}Metrics:${NC} $REPORT_DIR/metrics.json"

echo -e "\n${BLUE}Quick Stats:${NC}"
cat "$REPORT_DIR/metrics.json" 2>/dev/null || echo "No metrics available"

echo -e "\n${YELLOW}To view AI triage:${NC}"
echo "  cat $REPORT_DIR/ai/triage_report.md"

echo -e "\n${YELLOW}To run specific tools:${NC}"
echo "  Slither: slither src/contracts/vulnerable/<contract>.sol"
echo "  Foundry: forge test"
echo "  Echidna: echidna src/contracts/properties/<contract>.sol"
