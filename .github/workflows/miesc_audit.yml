name: MIESC Smart Contract Audit

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'examples/**/*.sol'
      - 'src/contracts/**/*.sol'
  pull_request:
    branches: [ main ]
    paths:
      - 'examples/**/*.sol'
      - 'src/contracts/**/*.sol'
  workflow_dispatch:
    inputs:
      priority:
        description: 'Audit priority level'
        required: true
        default: 'balanced'
        type: choice
        options:
          - fast
          - balanced
          - comprehensive

env:
  PYTHON_VERSION: '3.10'
  SOLC_VERSION: '0.8.0'

jobs:
  static-analysis:
    name: Static Analysis (Layer 1)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install slither-analyzer solc-select

      - name: Setup Solidity compiler
        run: |
          solc-select install ${{ env.SOLC_VERSION }}
          solc-select use ${{ env.SOLC_VERSION }}

      - name: Run StaticAgent
        id: static
        run: |
          python -c "
          from agents.static_agent import StaticAgent
          import json
          import sys
          from pathlib import Path

          agent = StaticAgent()

          # Find all Solidity files
          sol_files = list(Path('examples').glob('*.sol'))
          all_findings = []

          for sol_file in sol_files:
              print(f'Analyzing {sol_file}...')
              try:
                  results = agent.run(str(sol_file), solc_version='${{ env.SOLC_VERSION }}')
                  findings = results.get('static_findings', [])
                  all_findings.extend(findings)
                  print(f'  Found {len(findings)} issues')
              except Exception as e:
                  print(f'  Error: {e}')

          # Save results
          with open('static_results.json', 'w') as f:
              json.dump({'findings': all_findings, 'total': len(all_findings)}, f, indent=2)

          print(f'\nTotal findings: {len(all_findings)}')

          # Exit with error if critical vulnerabilities found
          critical = [f for f in all_findings if f.get('severity') == 'Critical']
          if critical:
              print(f'‚ùå Found {len(critical)} CRITICAL vulnerabilities!')
              sys.exit(1)
          "

      - name: Upload static analysis results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: static-analysis-results
          path: static_results.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('static_results.json', 'utf8'));
            const critical = results.findings.filter(f => f.severity === 'Critical').length;
            const high = results.findings.filter(f => f.severity === 'High').length;

            const body = `## üõ°Ô∏è MIESC Static Analysis Results

            **Total Findings**: ${results.total}
            - üî¥ Critical: ${critical}
            - üü† High: ${high}
            - üü° Medium: ${results.findings.filter(f => f.severity === 'Medium').length}
            - üü¢ Low: ${results.findings.filter(f => f.severity === 'Low').length}

            ${critical > 0 ? '‚ö†Ô∏è **CRITICAL vulnerabilities detected! Do not merge.**' : '‚úÖ No critical vulnerabilities found.'}

            <details>
            <summary>View Details</summary>

            \`\`\`json
            ${JSON.stringify(results.findings.slice(0, 5), null, 2)}
            \`\`\`
            </details>

            üìä Full report available in artifacts.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: body
            });

  compliance-check:
    name: Compliance Check (PolicyAgent)
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run PolicyAgent
        run: |
          python -c "
          from agents.policy_agent import PolicyAgent
          from agents.static_agent import StaticAgent
          import json

          # Run static first to populate Context Bus
          static = StaticAgent()
          static.run('examples/vulnerable_bank.sol')

          # Run compliance check
          policy = PolicyAgent()
          results = policy.run('examples/vulnerable_bank.sol')

          # Save compliance report
          with open('compliance_report.json', 'w') as f:
              json.dump(results.get('compliance_report', {}), f, indent=2)

          # Print summary
          report = results.get('compliance_report', {})
          compliance_index = report.get('overall_compliance_index', 0)
          print(f'Compliance Index: {compliance_index:.2%}')

          iso_score = report['standards_compliance']['ISO_IEC_27001_2022']['score']
          nist_score = report['standards_compliance']['NIST_SSDF']['score']
          owasp_score = report['standards_compliance']['OWASP_SC_Top10']['score']

          print(f'ISO/IEC 27001: {iso_score:.2%}')
          print(f'NIST SSDF: {nist_score:.2%}')
          print(f'OWASP SC Top 10: {owasp_score:.2%}')
          "

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance_report.json

  comprehensive-audit:
    name: Comprehensive Audit (CoordinatorAgent)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.priority == 'comprehensive'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install all dependencies
        run: |
          pip install -r requirements.txt
          pip install slither-analyzer mythril solc-select

      - name: Setup Solidity
        run: |
          solc-select install ${{ env.SOLC_VERSION }}
          solc-select use ${{ env.SOLC_VERSION }}

      - name: Run Comprehensive Audit
        timeout-minutes: 30
        run: |
          python -c "
          from agents.coordinator_agent import CoordinatorAgent
          import json

          coordinator = CoordinatorAgent()

          results = coordinator.run(
              'examples/vulnerable_bank.sol',
              priority='${{ github.event.inputs.priority }}',
              audit_scope=['static', 'symbolic', 'ai', 'policy']
          )

          # Save full audit
          with open('audit_summary.json', 'w') as f:
              json.dump(results.get('audit_summary', {}), f, indent=2)

          print('Comprehensive audit complete')
          "

      - name: Upload audit summary
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-audit
          path: audit_summary.json

  export-audit-trail:
    name: Export Audit Trail
    runs-on: ubuntu-latest
    needs: [static-analysis, compliance-check]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Export Audit Trail
        run: |
          mkdir -p outputs/evidence

          python -c "
          from mcp.context_bus import get_context_bus
          from agents.static_agent import StaticAgent

          # Run analysis to populate bus
          agent = StaticAgent()
          agent.run('examples/vulnerable_bank.sol')

          # Export audit trail (ISO 27001 A.8.15)
          bus = get_context_bus()
          bus.export_audit_trail('outputs/evidence/ci_audit_trail.json')

          print('Audit trail exported for compliance')
          "

      - name: Upload audit trail
        uses: actions/upload-artifact@v3
        with:
          name: audit-trail
          path: outputs/evidence/ci_audit_trail.json

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [static-analysis, compliance-check]
    if: always()

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Check Security Gate
        run: |
          python3 << 'EOF'
          import json
          import sys

          # Load results
          with open('static-analysis-results/static_results.json') as f:
              static_results = json.load(f)

          with open('compliance-report/compliance_report.json') as f:
              compliance = json.load(f)

          # Security gate criteria
          critical_count = len([f for f in static_results['findings'] if f.get('severity') == 'Critical'])
          high_count = len([f for f in static_results['findings'] if f.get('severity') == 'High'])
          compliance_index = compliance.get('overall_compliance_index', 0)

          print(f"Security Gate Check:")
          print(f"  Critical vulnerabilities: {critical_count}")
          print(f"  High vulnerabilities: {high_count}")
          print(f"  Compliance Index: {compliance_index:.2%}")

          # Gate rules
          if critical_count > 0:
              print("‚ùå FAIL: Critical vulnerabilities must be fixed")
              sys.exit(1)

          if high_count > 5:
              print("‚ùå FAIL: Too many high severity vulnerabilities")
              sys.exit(1)

          if compliance_index < 0.80:
              print("‚ùå FAIL: Compliance index below 80%")
              sys.exit(1)

          print("‚úÖ PASS: Security gate passed")
          EOF

  summary:
    name: Audit Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, compliance-check, export-audit-trail]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "## üõ°Ô∏è MIESC Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Priority**: ${{ github.event.inputs.priority || 'fast' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Layers Executed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Layer 1: Static Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Compliance Check (ISO/NIST/OWASP)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Audit Trail Export" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ Artifacts available for download" >> $GITHUB_STEP_SUMMARY
