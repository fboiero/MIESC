name: MIESC CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_core.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check code style (non-blocking)
        flake8 src/ --count --max-line-length=100 --ignore=E203,W503 --statistics || true

    - name: Check formatting with black
      run: |
        black --check src/ || true

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports || true

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-miesc

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Slither
      run: |
        pip install slither-analyzer

    - name: Run security audit on examples
      run: |
        # Audit example contracts (if they fail, it's expected - they're vulnerable!)
        slither examples/reentrancy_simple.sol || echo "Vulnerabilities detected (expected)"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements_core.txt
        pip install slither-analyzer

    - name: Test CLI
      run: |
        python src/miesc_cli.py --version
        python src/miesc_cli.py --help

    - name: Test MCP manifest generation
      run: |
        python src/miesc_cli.py mcp-server --export-manifest
        test -f mcp/manifest.json

    - name: Run sample audit (fast mode)
      run: |
        # Run quick audit without AI to test core functionality
        python src/miesc_cli.py run-audit examples/reentrancy_simple.sol \
          --no-ai \
          -o analysis/results/ci_test.json || echo "Test complete"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t miesc:ci .

    - name: Test Docker image
      run: |
        docker run --rm miesc:ci python src/miesc_cli.py --version

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, integration-test, build-docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MIESC ${{ github.ref }}
        body: |
          **MIESC Release**

          Multi-layer Intelligent Evaluation for Smart Contracts

          See [CHANGELOG.md](CHANGELOG.md) for details.
        draft: false
        prerelease: false
